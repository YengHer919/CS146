MATRIX_MULTIPLY(A, B): 
  if columns(A) ≠ rows(B): 
    raise ValueError("Matrix multiplication is not defined.") 

  rows_A ← number of rows in A 
  cols_A ← number of columns in A 
  cols_B ← number of columns in B 
  result ← matrix of size rows_A x cols_B filled with zeros 

  for i from 1 to rows_A do: 
    for j from 1 to cols_B do: 
    sum ← 0 
    for k from 1 to cols_A do: 
      sum ← sum + A[i][k] * B[k][j] 
    result[i][j] ← sum return result

This pseudocode would run at i*j*k time where i is the 
number of rows for A, j is the number of collums in B, 
and k is the number of collums for A. We need to have
seperate variables (instead of N) because the loops each have 
a different parameter for how many times the lines within
are run. The loops for i and j would make at minimal
i*j time. But the inner k loop would make this i*j*k. 


The Big O time is:
i * j * k <= i * j * k
O(i*j*k)

The Big Ω time is:
1 * 1 * 1 <= i * j * k
Ω(1*1*1)

Again we can't have a Big Θ time due to the Big O and 
Big Ω times not matching up
