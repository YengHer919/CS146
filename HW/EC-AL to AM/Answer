# Given an adjacency list, how can you convert it to an adjacency matrix?

First, you would find the amount of verticies inside the adjacnecy list so 
that you have a number to create an nxn matrix, then you would go through the 
adjacency list, the current vertex, or your key would be i and the vertex 
being traveled to or the value, would be j. Using these, you would iterate 
through the list and fill the matrix with [i][j]. You can fill the matrix at 
[i][j] with 1 for unweighted and the weight for weighted graphs, make sure to
fill in matrix[j][i] in the case of undirected graphs.

Python
def al_to_am(adj_list):
    n = len(adj_list)
    matrix = [[0] * n for k in range(n)]
    for i, edges in enumerate(adj_list):
        for j in edges:
            matrix[i][j] = 1 
    return matrix


# Given an adjacency matrix, how can you convert it to an adjacency list? 

First, you would initialize an empty list with the size of n from the matrix. Then, 
you would fill in the list at the matrix element [i] with each non-zero value at the 
matrix of [i][j]. For weighted graphs, you would store pairs, one key and one value.   

def adjacency_matrix_to_list(matrix):
    adj_list = [[] for _ in range(len(matrix))]
    for i, row in enumerate(matrix):
        for j, val in enumerate(row):
            if val != 0:  # Assuming 0 means no edge; for weighted graphs, val is the weight
                adj_list[i].append(j)  # For weighted graphs, append (j, val)
    return adj_list


# Given a directed graph, how can you reverse the direction of each edge?

